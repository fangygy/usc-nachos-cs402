Write-up for project 1: Fall 2011 
Date:09/26/2011 
Group: 50: 
             Name:               E-mail:               USC ID: 
             NingChong,Chen      ningchoc@usc.edu      5042823533
             Fang-Yi,Chu 
             Chien-Ming,Liao     chienmin@usc.edu      5148768361 

1.      Requirements: 
Part1: 
     To achieve synchronization among threads by implementing semaphores(which is already provided), locks, and condition variables. 
Part2: 
     Simulates a movie theater with the following types of people: 
Customer - Someone who has come to watch a movie - and perhaps buy some food 
TicketClerk - TicketClerks sell movie tickets to Customers. 
ConcessionClerk - ConcessionClerks sell food to Customers. 
TicketTaker - TicketTakers take movie tickets that Customers have purchased from a TicketClerk, and they also remind the Customer the number of the theater that their movie is being shown in. 
MovieTechnician - MovieTechnicians start and stop movies in each theater . 
Manager - Managers keep the theater running by making sure the various employees are doing their job. Managers also collect money from cash registers every so often. 
2.      Assumptions: 
Customer:
a. customers get into the movie theater with their group and ticketbuyers will interact with clerk after entering theater.
b. if no clerks on service, customers cannot find a line and they need to wait in the lobby until the manager signal them
c. if clerk is break, customers in the same line have to go back to re-line.
d. customers tell ticketbuyer what food they want in one response.
e. 
3.      Design: 
Customer of TicketBuyer:
a. enter theater with group
b. buy tickets
c. proceed with group after getting tickets
d. count food requests
e. buy food
f. proceed with group after getting food
g. check tickets
h. proceed with group after allowed into theater room
i. arrange seats
j. sit in the theater room
k. proceed with group after movie over
l. go bathroom or wait in lobby
m. proceed with group after bathroom
n. leave theater

Customer of regular:
a. enter theater with group
b. proceed with group after getting tickets
c. requests for food
d. proceed with group after getting food
e. proceed with group after allowed into theater room
f. sit in the theater room
g. proceed with group after movie over
h. go bathroom or wait in lobby
i. proceed with group after bathroom
j. leave theater

Manager:
a. check and break clerk (TicketClerk, ConcessionClerk, TicketTaker)
b. start movie and stop ticket taken
c. start ticket taken
d. collect money after all customers leave

TicketClerk:
a. sell tickets
b. stop working if manager asks
c. give money to manager

ConcessionClerk:
a. sell food
b. stop working if manager asks
c. give money to manager

TicketTaker:
a. check Tickets
b. stop working if manager asks
c. stop checking if no more place

MovieTechnician:
a. start movie
b. check if customer all seated

Manager:
a. check and break clerk (TicketClerk, ConcessionClerk, TicketTaker)
b. start movie and stop ticket taken
c. start ticket taken
d. collect money after all customers leave

4.Implementation: 
     Part1:
        Files added:

        Files Modified:
           Main.cc
           Synch.cc
           Synch.h

 	    Data structure modified:
           class Lock{
           bool isUsed;    // false: lock unused; true: lock used
           Thread *ownerThread; // the thread that is being processed right now 
           List *waitingQueue;    // threads waiting to acquire lock
           }
           
           class Condition{
           Lock *waitingLock; // the lock which is waited by the queue
           List *waitingQueue;// the waiting queue for the condition variable. 
           }
           
           Function Modified:
           -Synch.cc
				Lock::Lock(char* debugName)
				Lock::~Lock()
				void Lock::Acquire()
				void Lock::Release() 
				bool Lock::isHeldByCurrentThread()
				Condition::Condition(char* debugName)
				Condition::~Condition()
				void Condition::Wait(Lock* conditionLock)
				void Condition::Signal(Lock* conditionLock)
				void Condition::Broadcast(Lock* conditionLock)
				
     Part2:
       Files Added:
          employee.cc
          consessionclerk.cc
          customer.cc
          manger.cc
          movietechnician.cc
          ticketclerk.cc
          tickettaker.cc
       Files Modified:
          movietheater.cc
          movietheater.h
          
       Data Structure Modified:
       -in movietheater.h
       extern Lock *lBuyTickets;  //Lock to get in line of buyTickets
       extern Lock *lBuyFood;  //Lock to get in line of buyFood
       extern Lock *lCheckTickets;  //Lock to get in line of checkTickets
       extern Lock *lStartMovie;  //Lock to get seats and startMovie
       extern Lock *lStopMovie; //stop Movie
       extern Lock *lFindSeats;
       extern Lock *lGroup[MAX_GROUP];  //Lock for group to act mutex
       extern Lock *lTicketSold;  // Lock for ticket sold
       extern Lock *lTicketTaken;  // lock for ticket taken
       extern Lock *lAmount;  // lock for money collect    
       extern Lock *lCustomerLeft;  // lock for leave sum
       extern Semaphore *sGroup[MAX_GROUP];  //semaphore to make group act together
       extern Semaphore *sGroupFood[MAX_GROUP];  //semaphore to make sure everyone choose if need food
       extern Semaphore *sGroupBathroom[MAX_GROUP];  //semaphore to make sure everyone choose if need food
       extern Condition *cGroup[MAX_GROUP];  //Condition to make group act together
       extern Condition *cGroupFood[MAX_GROUP];  //Condition for ticketbuyer to ask for if need food
       //extern Condition *cGroupBathroom[MAX_GROUP];  //Condition for ticketbuyer to ask for if need bathroom
       extern Condition *cTicketTaken;  // Condition for ticketTaker and customer to know start ticket taken 
       extern int groupFoodSum[MAX_GROUP][2];  // order of group for food
       extern int groupBathroomSum[MAX_GROUP];  // order of group for food
       extern int ticketReceipt[MAX_GROUP];  // order of group for tickets
       extern int ticketTaken;  // ticket taken num
       extern bool stopTicketTaken;  // monitor variable for stop ticketTaken
       extern bool groupTicket[MAX_GROUP];  // monitor variable for if buyTickets done
       extern bool groupAskForFood[MAX_GROUP];  // monitor variable for if ask for food
       extern bool groupAskForBathroom[MAX_GROUP];  // monitor variable for if ask for food
       extern bool groupFood[MAX_GROUP];  // monitor variable for if buyFood done
       extern bool groupSeat[MAX_GROUP];  // monitor variable for if get seats
       extern bool groupLeaveRoom[MAX_GROUP];
       extern bool groupLeaveTheater[MAX_GROUP];
       extern bool bIsMovieOver;  //monitor variable for Movies State
       extern Lock *lIsMovieOver;
       extern bool seatState[MAX_SEAT];
       extern Semaphore *sSeat[MAX_SEAT];  //semaphore to Seat
       extern int ticketTaken;
       extern int totalTicketTaken;
       extern int totalTicketSold;
       extern double totalAmount;
       extern double ticketClerkAmount[MAX_TC];
       extern double concessionClerkAmount[MAX_CC];
       extern int seatPos;

       extern bool noTicketClerk;  // no clerk
       extern bool noConcessionClerk;  // no clerk
       extern bool noTicketTaker;  // no clerk
       extern Condition *cNoTicketClerk;  // no clerk
       extern Condition *cNoConcessionClerk;  // no clerk
       extern Condition *cNoTicketTaker;  // no clerk
       extern Semaphore *sNoTicketClerk;  // no clerk
       extern Semaphore *sNoConcessionClerk;  // no clerk
       extern Semaphore *sNoTicketTaker;  // no clerk
       extern Semaphore *sWaitSeat[MAX_GROUP];  //semaphore to Seat
       extern int SeatLocation[MAX_GROUPSIZE];
       extern Semaphore *sStartMovie; 
       extern Semaphore *sMT_CR_Check;
       extern Condition *cMT_CR_Check;
       extern Semaphore *sStopMovie; 
       extern Semaphore *sMT_CR_Stop;
       extern Condition *cMT_CR_Stop;

       Function added & Modified:
       -in movietheater.h
       class Employee {}
       class Customer {}
       class TicketClerk : public Employee{}
       class ConcessionClerk : public Employee{}
       class TicketTaker : public Employee{}
       class TicketTaker : public Employee{}
       class Manager : public Employee{}

       -in customer.cc
       //Constructor of the customer class
       Customer::Customer(int cId, int gId, int gSize, bool ticketBuyer)
       //destructor of the customer class
       Customer::~Customer() 
       //the action of the customer including buying tickets, buying foods..etc
       void Customer::action()
       //verify if this customer is the ticket buyer
       bool Customer::getIsTicketBuyer()
       //customer gets in to a valid and shortest line
       int Customer::getInLine(Lock *lock, Condition *cNoClerk, int count, bool noClerk, Employee** employee )
       //customer buys tickets from ticket clerk then leave the counter
       void Customer::buyTickets()
       //customer buys food from the consession clerk 
       void Customer::buyFood()
       //ask if others in the group also wants food and set the total amout of cokes and popcorns
       bool Customer::countFood()
       //determin if the customer wants cokes or popcorns based on probability
       int Customer::answerForFood(int food)
       //customer interactwith the ticket taker, may enter or wait in the lobby
       void Customer::checkTickets()
       //customer may go to the bathroom based on probability
       void Customer::goBathroom()
       //customer leave the theater
       void Customer::leaveTheater()
       //customer find the seats for themselfs
       void Customer::arrangeSeats()
       //customer choose seats from the beginning of the row and also prefer consecutive seats
       int Customer::getSeats(int Size)
       //customer waits for the head customer to buy tickets
       void Customer::waitTickets()
       //wait for the head customer to ask themselfs if needs food 
       void Customer::waitFood()
       //wait for the ticket taker to check their recipeps
       void Customer::waitCheck()
       //wait to see if there is a seat available
       void Customer::waitSeats()
       //watching movie and wait for the movie techinician to wake them up
       void Customer::watchMovie()
       //wait to leave the theater
       void Customer::waitLeaveRoom()
       //head customer notify all the group member to proceed to the next step
       void Customer::proceed(bool *flag)
       
       -employee.cc
       //set the state of the employee to busy
       void Employee::setIsBusy(bool busy)
       //see if the employee is in busy state 
       bool Employee::getIsBusy()
       //let the employee to have a break 
       void Employee::setIsBreak(bool isOff) 
       //see if the employee is in a break
       bool Employee::getIsBreak() 
       //get the type of the employee 
       char * Employee::getEmployeeType() 
       //get the ID of the employee
       int Employee::getId() 
       //see which group the employee is in
       int Employee::getGroupId() 
       //set the group ID
       void Employee::setGroupId(int gId) 
       // generate an employee
       Employee::Employee(int eId, char * type) 
       // degenerate an employee
       Employee::~Employee() {}
       //get the waiting size of the employee
       int Employee::getWaitingSize() 
       //plus one on waiting list
       void Employee::addWaitingSize()
       //minus one on waiting list
       void Employee::subWaitingSize()
       
       -in ticketclerk.cc
       //create a ticket clerk        
       TicketClerk::TicketClerk(int tcId) : Employee(tcId, "TicketClerk"){}
       //caculate how much should the tickets cost 
       void TicketClerk::setAmount(int sum) {}
       //get the amount of money
       double TicketClerk::getAmount() {}
       //set the total amount of money for the tickets
       void TicketClerk::setTicketSum(int sum) {}
       //get the total amount of money for the tickets
       int TicketClerk::getTicketSum() {}
       //set the amount of payment
       void TicketClerk::setPayment(double p) {}
       //for ticket clerk tp sell tickets
       void TicketClerk::sellTickets() {}

       -in manager.cc
       //order ticket taker to take tickets
       //order movie technicion to play the movie
       //collects money after all the customer leaves 
       void Manager::work() {}
       //manager collects the money from the ticketclerk and caculates its total
       void Manager::collectMoney() {}      
       // ask the movie technician to start a Movie
       void Manager::startMovie() {}
       // ask ticketTaker and customer to start
       void Manager::startTicketTaken() {}
       // rand ask an employee to break and sigal the waiting customer to change line
       // if no clerk work and customers come, have to ask one to off break
       void Manager::randToBreak(Lock * lockWaiting, Employee ** clerk, int count, bool noClerk, Condition *cNoClerk, Semaphore * sNoClerk) {}

       -in movietechnician.cc       
       //create a movietechnician
       MovieTechnician::MovieTechnician(int id) : Employee(id, "MovieTechnician"){}
       //start a movie if the manager told so
       void MovieTechnician::WaitManager(){}
       //check if all the customers in the theater is seated 
       void MovieTechnician::checkSeated(){}
       //star playing a movie and ends it after a period of time 
       void MovieTechnician::playMovie(){}
       //Movietechnician broadcast all the customers in the theater to leave
       void MovieTechnician::infoCustomer(){}
       //acknoledge the manger that the movie is over
       void  MovieTechnician::infoManager(){}

           
           
           
Customer of TicketBuyer:
a. enter theater with group
   //create a customer and initialize it's value
   Customer::Customer(int cId, int gId, int gSize, bool ticketBuyer)
b. buy tickets
   // get in which line
   TicketClerk *clerk = tc[lineIndex];
   // if busy wait for ticketClerk
   if (clerk->getIsBusy()) {
        clerk->condition[0]->Wait(lBuyTickets);
   }
   // start to interact with a TicketClerk
    clerk->lock->Acquire();
    if (!clerk->getIsBreak()) {
        clerk->setIsBusy(true);
        lBuyTickets->Release(); 
        // tell clerk tickets sum
        clerk->setGroupId(groupId);
        clerk->setTicketSum(groupSize);
        clerk->condition[1]->Signal(clerk->lock);

        // wait for money amount
        clerk->condition[1]->Wait(clerk->lock);
        // ask ticket clerk for total price
        double amount = clerk->getAmount();
        // pay money 
        clerk->setPayment(amount);
        printf("Customer [%d] in Group [%d] in TicketClerk line [%d] is paying [%.2f] for tickets\n",customerId,groupId,lineIndex,amount);
        
        clerk->condition[1]->Signal(clerk->lock);

        // wait to get tickets back
        clerk->condition[1]->Wait(clerk->lock);
        // finish and leave
        clerk->condition[1]->Signal(clerk->lock);
    }
    // if the ticket clerk is on a break
    else {
    clerk->subWaitingSize();
        // for race condition of waiting size
        lBuyTickets->Release();
        clerk->lock->Release();
        buyTickets();     
    }
    clerk->lock->Release();
    
c. proceed with group after getting tickets

d. count food requests
   //head customer counts the amount of cokes and popcorns needed in the group
   if (getIsTicketBuyer()) {
        lGroup[groupId]->Acquire();
        // if one of the member wants food
        for (int i = 0;i < 2; ++i) {
            groupFoodSum[groupId][i] += answerForFood(i);
        }
        // ask group member if they want food
        cGroupFood[groupId]->Broadcast(lGroup[groupId]);
        // set monitor variable true
        groupAskForFood[groupId] = true;
        lGroup[groupId]->Release();
        //sGroupFood[groupId]->V();
        // wait for all the customer answer for food
        for (int i = 1;i < groupSize; ++i) {
            sGroupFood[groupId]->P();
        }
e. buy food
    //Customer getting in ConcessionClerk line
    ConcessionClerk *clerk = cc[lineIndex];
    if (clerk->getIsBusy()) {
        clerk->condition[0]->Wait(lBuyFood);
    }
    //Customer walking up to ConcessionClerk to buy popcorn and sodas.
    clerk->lock->Acquire();
    if (!clerk->getIsBreak()) {
        clerk->setIsBusy(true);
        lBuyFood->Release();
 
        clerk->setGroupId(groupId);
    // tell clerk popcorn sum and soda sum
    for (int i = 0;i < 2; ++i) {
            clerk->setFood(i, groupFoodSum[groupId][i]);
            clerk->condition[1]->Signal(clerk->lock);
            // wait for acknowledgement and amount
            clerk->condition[1]->Wait(clerk->lock);
        }
    // give money
        clerk->setPayment(amount);
        clerk->condition[1]->Signal(clerk->lock);
        //wait for clerk to acknowledge money 
        clerk->condition[1]->Wait(clerk->lock);
        // customer leave, get next customer
        clerk->condition[1]->Signal(clerk->lock);
    } else {
    // if the concession clerk is on break
        clerk->subWaitingSize();
    // for race condition of waiting size
        lBuyFood->Release();
        clerk->lock->Release();
        buyFood();
    }
    
f. proceed with group after getting food

g. check tickets
    //Customer gets in a TicketTaker line
    lCheckTickets->Acquire();
    int lineIndex = -1;
    while (lineIndex == -1) {
        lineIndex = getInLine(lCheckTickets, cNoTicketTaker, MAX_TT, noTicketTaker, (Employee**)tt);
    }
    TicketTaker *clerk = tt[lineIndex];
    // if the ticket taker is not avaliable
    lTicketTaken->Acquire();
    if (stopTicketTaken) {
    // all customer should be waiting in the lobby
        clerk->subWaitingSize();
        cTicketTaken->Wait(lTicketTaken);
        lTicketTaken->Release();
        lCheckTickets->Release();
        checkTickets();
    }
    lTicketTaken->Release();
    // if the ticket taker is available
    clerk->lock->Acquire();
    if (!clerk->getIsBreak() ) {
        clerk->setIsBusy(true);
        lCheckTickets->Release();
        clerk->setGroupId(groupId);
        // give ticket receipt to the ticket taker 
        clerk->setTicketSum(ticketReceipt[groupId]);
        clerk->condition[1]->Signal(clerk->lock);
        clerk->condition[1]->Wait(clerk->lock);
        lTicketTaken->Acquire();
h. proceed with group after allowed into theater room
i. arrange seats
    lFindSeats->Acquire();
    // Head customer get a seat for him/herself         
    getSeats(groupSize);
    seatPos=SeatLocation[0];	
    seatState[SeatLocation[0]]=true;
    for(i=1;i< groupSize;i++){
        lGroup[groupId]->Acquire();
        seatPos=SeatLocation[i];	
        sWaitSeat[groupId]->V();        
        cGroup[groupId]->Wait(lGroup[groupId]);
        seatState[seatPos]=true;
    }
    lFindSeats->Release();      
    
j. sit in the theater room
    //assumption:customer always choose seat from the beginning of a row
    for(i=0;i<MAX_ROW;i++){
        consecutive=0;
        for(j=0;j<MAX_COL;j++){
            if(seatState[j+i*MAX_COL]==false){
                consecutive++;         
            }
        }
        SeatAvailable[i]=consecutive; 
    }
    //Search for the first time if any consecutive seats
    for(i=0;i<MAX_ROW;i++){  
        if(SeatAvailable[i]>=Size){
            for(j=0;j<Size;j++){
                SeatLocation[j]=(MAX_COL-SeatAvailable[i]+j)+i*MAX_COL;               
                bFind=true;
            }
            SeatAvailable[i]=0;
        }
    }
    if(bFind==false){
        for(i=0;i<MAX_ROW;i++){  
            if(SeatAvailable[i]!=0){
                  for(j=0;j<SeatAvailable[i];j++){
                        SeatLocation[RequestSeat]=(MAX_COL-SeatAvailable[i])+i*MAX_COL; 
                        RequestSeat++;          
                  }
                  SeatAvailable[i]=0;
            }
            if(RequestSeat==Size-1){
                break;
            }
        }   
    }
k. proceed with group after movie over

l. go bathroom or wait in lobby
    lGroup[groupId]->Acquire();
    //head customer ask if the members needs to go to the bathroom
    if (!groupAskForBathroom[groupId]) {
        cGroup[groupId]->Wait(lGroup[groupId]);
    }
    if(answerForBathroom()){
         groupBathroomSum[groupId]++;
         sGroupBathroom[groupId]->V();
         //customer goes to the bathroom and go back to lobby afterwords 
         goBathroom();  
         sGroupBathroom[groupId]->V();
    }else{
    //the member doesn't want to go to the bathroom
         sGroupBathroom[groupId]->V();   
    }
    lGroup[groupId]->Release();
m. proceed with group after bathroom
n. leave theater
       
5.      Testing: 
        -Part I
         How to run:
            To run test case 1, use "nachos -T" as the command.
         Test Output:
	        Five tests will start one by one. The threads will try to acquire locks and use CVs.


        - Part II
	      
    	##TEST CASE 1##
    	    Customers always take the shortest line, but no 2 customers ever choose the same shortest line at the same time

           How to run: nachos -rs 10 -TC1 | grep "getting in TicketClerk line"
               
           Test result: 

                
    	##TEST CASE 2##
    	    Managers only read one from one Clerk's total money received, at a time.

           How to run: nachos -rs 10 -TC2 | egrep "Manager collected|Total money"
               
           Test result:
                Manager collected [36.00] from TicketClerk[0].
                Manager collected [96.00] from TicketClerk[1].
                Manager collected [60.00] from TicketClerk[2].
                Manager collected [12.00] from TicketClerk[3].
                Manager collected [24.00] from TicketClerk[4].
                Manager collected [44.00] from ConcessionClerk[0].
                Manager collected [41.00] from ConcessionClerk[1].
                Manager collected [17.00] from ConcessionClerk[2].
                Manager collected [14.00] from ConcessionClerk[3].
                Manager collected [0.00] from ConcessionClerk[4].
                Total money made by office = [344.00]

    	##TEST CASE 3##
    	    Customers do not leave a Clerk, or TicketTaker, until they are told to do so. Clerks and TicketTakers do not start with another Customer until they know the current Customer has left. customer until they know that the last Customer has left their area

           How to run: a. nachos -rs 10 -TC3 | egrep "is walking up to TicketClerk|is leaving TicketClerk"
                       b. nachos -rs 10 -TC3 | egrep "is walking up to ConcessionClerk|is leaving ConcessionClerk"
                       c. nachos -rs 10 -TC3 | egrep "is walking up to TicketTaker|is leaving TicketTaker"

           Test result:
                a.
                Customer [0] in Group [0] is walking up to TicketClerk[0] to buy [1] tickets
                Customer [3] in Group [1] is walking up to TicketClerk[1] to buy [3] tickets
                Customer [8] in Group [2] is walking up to TicketClerk[2] to buy [5] tickets
                Customer [9] in Group [3] is walking up to TicketClerk[3] to buy [1] tickets
                Customer [11] in Group [4] is walking up to TicketClerk[4] to buy [2] tickets
                Customer [0] in Group [0] is leaving TicketClerk[0]
                Customer [3] in Group [1] is leaving TicketClerk[1]
                Customer [9] in Group [3] is leaving TicketClerk[3]
                Customer [13] in Group [5] is walking up to TicketClerk[0] to buy [2] tickets
                Customer [8] in Group [2] is leaving TicketClerk[2]
                Customer [11] in Group [4] is leaving TicketClerk[4]
                Customer [18] in Group [6] is walking up to TicketClerk[1] to buy [5] tickets
                Customer [18] in Group [6] is leaving TicketClerk[1]
                Customer [13] in Group [5] is leaving TicketClerk[0]

                b. 
                Customer [0] in Group [0] is walking up to ConcessionClerk[0] to buy [1] popcorn and [1] soda.
                Customer [9] in Group [3] is walking up to ConcessionClerk[1] to buy [0] popcorn and [1] soda.
                Customer [3] in Group [1] is walking up to ConcessionClerk[2] to buy [1] popcorn and [3] soda.
                Customer [11] in Group [4] is walking up to ConcessionClerk[3] to buy [2] popcorn and [1] soda.
                Customer [0] in Group [0] is leaving ConcessionClerk[0]
                Customer [9] in Group [3] is leaving ConcessionClerk[1]
                Customer [13] in Group [5] is walking up to ConcessionClerk[0] to buy [0] popcorn and [2] soda.
                Customer [3] in Group [1] is leaving ConcessionClerk[2]
                Customer [11] in Group [4] is leaving ConcessionClerk[3]
                Customer [8] in Group [2] is walking up to ConcessionClerk[1] to buy [5] popcorn and [3] soda.
                Customer [13] in Group [5] is leaving ConcessionClerk[0]
                Customer [18] in Group [6] is walking up to ConcessionClerk[0] to buy [3] popcorn and [3] soda.
                Customer [8] in Group [2] is leaving ConcessionClerk[1]
                Customer [18] in Group [6] is leaving ConcessionClerk[0]

                c. 
                Customer [0] in Group [0] is walking up to TicketTaker[0] to give [1] tickets.
                Customer [0] in Group [0] is leaving TicketTaker[0]
                Customer [9] in Group [3] is walking up to TicketTaker[1] to give [1] tickets.
                Customer [11] in Group [4] is walking up to TicketTaker[0] to give [2] tickets.
                Customer [9] in Group [3] is leaving TicketTaker[1]
                Customer [11] in Group [4] is leaving TicketTaker[0]
                Customer [3] in Group [1] is walking up to TicketTaker[2] to give [3] tickets.
                Customer [3] in Group [1] is leaving TicketTaker[2]
                Customer [13] in Group [5] is walking up to TicketTaker[0] to give [2] tickets.
                Customer [13] in Group [5] is leaving TicketTaker[0]
                Customer [8] in Group [2] is walking up to TicketTaker[1] to give [5] tickets.
                Customer [8] in Group [2] is leaving TicketTaker[1]
                Customer [18] in Group [6] is walking up to TicketTaker[0] to give [5] tickets.
                Customer [18] in Group [6] is leaving TicketTaker[0]

    	##TEST CASE 4##
    	    Managers get Clerks off their break when lines get too long

           How to run: 

           Test result:
                
    	##TEST CASE 5##
    	    Total sales never suffers from a race condition

           How to run: nachos -rs 10 -TC5 | egrep "Number of Customer|Total tickets"

           Test result: 
                Number of Customers = [19]
                Total tickets sold by office = [19]
                Total tickets taken by office = [19]
                
    	##TEST CASE 6##
    	    Customer groups always move together through the theater. This requires explicit synchronization that you implement.

           How to run: nachos -rs 10 -TC6 | egrep "group \[1\]" | egrep "HeadCustomer"
                       nachos -rs 10 -TC6 | egrep "group \[2\]" | egrep "HeadCustomer"
           Test result:

                Customer [1] of group [1] is waiting for the HeadCustomer.
                Customer [2] of group [1] is waiting for the HeadCustomer.
                HeadCustomer [3] of group [1] has told the group to proceed.
                Customer [1] of group [1] has been told by the HeadCustomer to proceed.
                Customer [1] of group [1] is waiting for the HeadCustomer.
                Customer [2] of group [1] has been told by the HeadCustomer to proceed.
                Customer [2] of group [1] is waiting for the HeadCustomer.
                HeadCustomer [3] of group [1] has told the group to proceed.
                Customer [1] of group [1] has been told by the HeadCustomer to proceed.
                Customer [1] of group [1] is waiting for the HeadCustomer.
                Customer [2] of group [1] has been told by the HeadCustomer to proceed.
                Customer [2] of group [1] is waiting for the HeadCustomer.
                HeadCustomer [3] of group [1] has told the group to proceed.
                Customer [1] of group [1] has been told by the HeadCustomer to proceed.
                Customer [2] of group [1] has been told by the HeadCustomer to proceed.
                HeadCustomer [3] of group [1] has told the group to proceed.
                HeadCustomer [3] of group [1] has told the group to proceed.

                Customer [5] of group [2] is waiting for the HeadCustomer.
                Customer [6] of group [2] is waiting for the HeadCustomer.
                Customer [7] of group [2] is waiting for the HeadCustomer.
                Customer [4] of group [2] is waiting for the HeadCustomer.
                HeadCustomer [8] of group [2] has told the group to proceed.
                Customer [5] of group [2] has been told by the HeadCustomer to proceed.
                Customer [6] of group [2] has been told by the HeadCustomer to proceed.
                Customer [7] of group [2] has been told by the HeadCustomer to proceed.
                Customer [4] of group [2] has been told by the HeadCustomer to proceed.
                Customer [5] of group [2] is waiting for the HeadCustomer.
                Customer [7] of group [2] is waiting for the HeadCustomer.
                Customer [6] of group [2] is waiting for the HeadCustomer.
                Customer [4] of group [2] is waiting for the HeadCustomer.
                HeadCustomer [8] of group [2] has told the group to proceed.
                Customer [5] of group [2] has been told by the HeadCustomer to proceed.
                Customer [5] of group [2] is waiting for the HeadCustomer.
                Customer [7] of group [2] has been told by the HeadCustomer to proceed.
                Customer [7] of group [2] is waiting for the HeadCustomer.
                Customer [6] of group [2] has been told by the HeadCustomer to proceed.
                Customer [4] of group [2] has been told by the HeadCustomer to proceed.
                Customer [6] of group [2] is waiting for the HeadCustomer.
                Customer [4] of group [2] is waiting for the HeadCustomer.
                HeadCustomer [8] of group [2] has told the group to proceed.
                Customer [5] of group [2] has been told by the HeadCustomer to proceed.
                Customer [7] of group [2] has been told by the HeadCustomer to proceed.
                Customer [6] of group [2] has been told by the HeadCustomer to proceed.
                Customer [4] of group [2] has been told by the HeadCustomer to proceed.
                HeadCustomer [8] of group [2] has told the group to proceed.
                HeadCustomer [8] of group [2] has told the group to proceed.



6.      Discussions:
         
a. about process of each clerk.
b. 
7.      Miscellaneous: 
a. we still have problems in Ticket Taker, so 

        
        	-Programming
        	
            -Compiling
            
           	-Testing & Debugging

Write-up for project 1: Fall 2011 
Date:09/26/2011 
Group: 50: 
             Name:               E-mail:               USC ID: 
             NingChong,Chen      ningchoc@usc.edu      5042823533
             Fang-Yi,Chu 
             Chien-Ming,Liao     chienmin@usc.edu      5148768361 

1. Requirements: 
Part1: 
     To achieve synchronization among threads by implementing semaphores(which is already provided), locks, and condition variables. 
Part2: 
     Simulates a movie theater with the following types of people: 
Customer - Someone who has come to watch a movie - and perhaps buy some food 
TicketClerk - TicketClerks sell movie tickets to Customers. 
ConcessionClerk - ConcessionClerks sell food to Customers. 
TicketTaker - TicketTakers take movie tickets that Customers have purchased from a TicketClerk, and they also remind the Customer the number of the theater that their movie is being shown in. 
MovieTechnician - MovieTechnicians start and stop movies in each theater . 
Manager - Managers keep the theater running by making sure the various employees are doing their job. Managers also collect money from cash registers every so often.
2. Assumptions: 
Customer:
a. customers get into the movie theater with their group and ticketbuyers will interact with clerk after entering theater.
b. if no clerks on service, customers cannot find a line and they need to wait in the lobby until the manager signal them
c. if clerk is break, customers in the same line have to go back to re-line.
d. customers tell ticketbuyer what food they want in one response.
e. customers tell ticketbuyer is
f. 
g. 
h. 
i. 
j. 
3. Design: 
Customer of TicketBuyer:
a. enter theater with group
b. buy tickets
    find the shortest line and then get in line. if not find, wait in the lobby and set noClerk variables until the manager broadcast them.
    if ticketClerk is busy then wait for ticketClerk signal, else go to signal free ticketClerk.
    if ticketClerk is on break then go back find line, else interact with ticketClerk.
    interact: tell clerk tickets sum, wait for money amount, and then pay money, wait to get tickets back, finish and leave.
c. proceed with group after getting tickets
    wait customers get gather, and broadcast customers.
d. count food requests
    ticketbuyer ask customer for food, and then customer response
e. buy food
    find line.
    if concession clerk is busy then wait for clerk signal, else go to signal free clerk.
    if concession clerk is on break then go back find line, else interact with clerk.
    interact: tell clerk popcorn sum and soda sum, wait for acknowledgement and amount, and then pay money, wait to get food back, finish and leave.
f. proceed with group after getting food
g. check tickets
    find line.
    if ticket taker is busy then wait for clerk signal, else go to signal free clerk.
    if ticket taker is on break then go back find line, else interact with clerk.
    if ticket taker stops taking tickets, go to lobby and wait manager to broadcast.
    then interact with ticket taker, give ticket receipt.
    if ticket taker stop taking ticket for theater is full, go to lobby and wait for broadcast.
    else wait ticket taker to allow to get into room.
h. proceed with group after allowed into theater room
i. arrange seats
j. sit in the theater room
k. proceed with group after movie over
l. go bathroom or wait in lobby
m. proceed with group after bathroom
n. leave theater

Customer of regular:
a. enter theater with group
b. proceed with group after getting tickets
c. requests for food
d. proceed with group after getting food
e. proceed with group after allowed into theater room
f. sit in the theater room
g. proceed with group after movie over
h. go bathroom or wait in lobby
i. proceed with group after bathroom
j. leave theater

Manager: do while, and yield every loop
a. check and break clerk (TicketClerk, ConcessionClerk, TicketTaker)
b. start movie and stop ticket taken
c. start ticket taken
d. collect money after all customers leave

TicketClerk:
a. sell tickets
b. stop working if manager asks
c. give money to manager

ConcessionClerk:
a. sell food
b. stop working if manager asks
c. give money to manager

TicketTaker:
a. check Tickets
    if stop check ticket, wait for manager to broadcast
    if on break, wait for manager signal
    if customer on waiting line, ask customer to proceed,
    then wait customer to signal,
    get tickets sum from customer,
    if too much tickets, stop taking tickets. first to ask the customer on service to wait on lobby, and broadcast every one in line to go lobby.
    else allow customer to in, and not to enforce seats number.
b. stop working if manager asks
c. stop checking if no more place

MovieTechnician:
a. start movie
    wait Manager to signal, then check the seated and then start movie.
b. check if customer all seated

Manager:
a. check and break clerk (TicketClerk, ConcessionClerk, TicketTaker)
b. start movie and stop ticket taken
    if ticket taker stop taking tickets or ticket sold equals ticket taken which is not zero.
    signal MovieTechnician to start movie.
c. start ticket taken
d. collect money after all customers leave

4.Implementation: 
     Part1:
        Files added:

        Files Modified:
           Main.cc
           Synch.cc
           Synch.h

 	    Data structure modified:
           class Lock{
               bool isUsed;    // false: lock unused; true: lock used
               Thread *ownerThread; // the thread that is being processed right now 
               List *waitingQueue;    // threads waiting to acquire lock
             }
               
           class Condition{
               Lock *waitingLock; // the lock which is waited by the queue
               List *waitingQueue;// the waiting queue for the condition variable. 
             }
           
           Function Modified:
           -Synch.cc
				Lock::Lock(char* debugName)
				Lock::~Lock()
				void Lock::Acquire()
				void Lock::Release() 
				bool Lock::isHeldByCurrentThread()
				Condition::Condition(char* debugName)
				Condition::~Condition()
				void Condition::Wait(Lock* conditionLock)
				void Condition::Signal(Lock* conditionLock)
				void Condition::Broadcast(Lock* conditionLock)
				
     Part2:
       Files Added:
          employee.cc
          consessionclerk.cc
          customer.cc
          manger.cc
          movietechnician.cc
          ticketclerk.cc
          tickettaker.cc
       Files Modified:
          movietheater.cc
          movietheater.h
          
       Data Structure Modified:
       -in movietheater.h
       extern Lock *lBuyTickets;  //Lock to get in line of buyTickets
       extern Lock *lBuyFood;  //Lock to get in line of buyFood
       extern Lock *lCheckTickets;  //Lock to get in line of checkTickets
       extern Lock *lStartMovie;  //Lock to get seats and startMovie
       extern Lock *lStopMovie; //stop Movie
       extern Lock *lFindSeats;
       extern Lock *lGroup[MAX_GROUP];  //Lock for group to act mutex
       extern Lock *lTicketSold;  // Lock for ticket sold
       extern Lock *lTicketTaken;  // lock for ticket taken
       extern Lock *lAmount;  // lock for money collect    
       extern Lock *lCustomerLeft;  // lock for leave sum
       extern Semaphore *sGroup[MAX_GROUP];  //semaphore to make group act together
       extern Semaphore *sGroupFood[MAX_GROUP];  //semaphore to make sure everyone choose if need food
       extern Semaphore *sGroupBathroom[MAX_GROUP];  //semaphore to make sure everyone choose if need food
       extern Condition *cGroup[MAX_GROUP];  //Condition to make group act together
       extern Condition *cGroupFood[MAX_GROUP];  //Condition for ticketbuyer to ask for if need food
       //extern Condition *cGroupBathroom[MAX_GROUP];  //Condition for ticketbuyer to ask for if need bathroom
       extern Condition *cTicketTaken;  // Condition for ticketTaker and customer to know start ticket taken 
       extern int groupFoodSum[MAX_GROUP][2];  // order of group for food
       extern int groupBathroomSum[MAX_GROUP];  // order of group for food
       extern int ticketReceipt[MAX_GROUP];  // order of group for tickets
       extern int ticketTaken;  // ticket taken num
       extern bool stopTicketTaken;  // monitor variable for stop ticketTaken
       extern bool groupTicket[MAX_GROUP];  // monitor variable for if buyTickets done
       extern bool groupAskForFood[MAX_GROUP];  // monitor variable for if ask for food
       extern bool groupAskForBathroom[MAX_GROUP];  // monitor variable for if ask for food
       extern bool groupFood[MAX_GROUP];  // monitor variable for if buyFood done
       extern bool groupSeat[MAX_GROUP];  // monitor variable for if get seats
       extern bool groupLeaveRoom[MAX_GROUP];
       extern bool groupLeaveTheater[MAX_GROUP];
       extern bool bIsMovieOver;  //monitor variable for Movies State
       extern Lock *lIsMovieOver;
       extern bool seatState[MAX_SEAT];
       extern Semaphore *sSeat[MAX_SEAT];  //semaphore to Seat
       extern int ticketTaken;
       extern int totalTicketTaken;
       extern int totalTicketSold;
       extern double totalAmount;
       extern double ticketClerkAmount[MAX_TC];
       extern double concessionClerkAmount[MAX_CC];
       extern int seatPos;

       extern bool noTicketClerk;  // no clerk
       extern bool noConcessionClerk;  // no clerk
       extern bool noTicketTaker;  // no clerk
       extern Condition *cNoTicketClerk;  // no clerk
       extern Condition *cNoConcessionClerk;  // no clerk
       extern Condition *cNoTicketTaker;  // no clerk
       extern Semaphore *sNoTicketClerk;  // no clerk
       extern Semaphore *sNoConcessionClerk;  // no clerk
       extern Semaphore *sNoTicketTaker;  // no clerk
       extern Semaphore *sWaitSeat[MAX_GROUP];  //semaphore to Seat
       extern int SeatLocation[MAX_GROUPSIZE];
       extern Semaphore *sStartMovie; 
       extern Semaphore *sMT_CR_Check;
       extern Condition *cMT_CR_Check;
       extern Semaphore *sStopMovie; 
       extern Semaphore *sMT_CR_Stop;
       extern Condition *cMT_CR_Stop;

       Function added & Modified:
       -in movietheater.h
       class Employee {}
       class Customer {}
       class TicketClerk : public Employee{}
       class ConcessionClerk : public Employee{}
       class TicketTaker : public Employee{}
       class Manager : public Employee{}

       -in customer.cc
       //Constructor of the customer class
       Customer::Customer(int cId, int gId, int gSize, bool ticketBuyer)
       //destructor of the customer class
       Customer::~Customer() 
       //the action of the customer including buying tickets, buying foods..etc
       void Customer::action()
       //verify if this customer is the ticket buyer
       bool Customer::getIsTicketBuyer()
       //customer gets in to a valid and shortest line
       int Customer::getInLine(Lock *lock, Condition *cNoClerk, int count, bool noClerk, Employee** employee )
       //customer buys tickets from ticket clerk then leave the counter
       void Customer::buyTickets()
       //customer buys food from the consession clerk 
       void Customer::buyFood()
       //ask if others in the group also wants food and set the total amout of cokes and popcorns
       bool Customer::countFood()
       //determin if the customer wants cokes or popcorns based on probability
       int Customer::answerForFood(int food)
       //customer interactwith the ticket taker, may enter or wait in the lobby
       void Customer::checkTickets()
       //customer may go to the bathroom based on probability
       void Customer::goBathroom()
       //customer leave the theater
       void Customer::leaveTheater()
       //customer find the seats for themselfs
       void Customer::arrangeSeats()
       //customer choose seats from the beginning of the row and also prefer consecutive seats
       int Customer::getSeats(int Size)
       //customer waits for the head customer to buy tickets
       void Customer::waitTickets()
       //wait for the head customer to ask themselfs if needs food 
       void Customer::waitFood()
       //wait for the ticket taker to check their recipeps
       void Customer::waitCheck()
       //wait to see if there is a seat available
       void Customer::waitSeats()
       //watching movie and wait for the movie techinician to wake them up
       void Customer::watchMovie()
       //wait to leave the theater
       void Customer::waitLeaveRoom()
       //head customer notify all the group member to proceed to the next step
       void Customer::proceed(bool *flag)
       
       -in employee.cc
       //set the state of the employee to busy
       void Employee::setIsBusy(bool busy)
       //see if the employee is in busy state 
       bool Employee::getIsBusy()
       //let the employee to have a break 
       void Employee::setIsBreak(bool isOff) 
       //see if the employee is in a break
       bool Employee::getIsBreak() 
       //get the type of the employee 
       char * Employee::getEmployeeType() 
       //get the ID of the employee
       int Employee::getId() 
       //see which group the employee is in
       int Employee::getGroupId() 
       //set the group ID
       void Employee::setGroupId(int gId) 
       // generate an employee
       Employee::Employee(int eId, char * type) 
       // degenerate an employee
       Employee::~Employee() {}
       //get the waiting size of the employee
       int Employee::getWaitingSize() 
       //plus one on waiting list
       void Employee::addWaitingSize()
       //minus one on waiting list
       void Employee::subWaitingSize()
       
       -in ticketclerk.cc
       //create a ticket clerk        
       TicketClerk::TicketClerk(int tcId) : Employee(tcId, "TicketClerk"){}
       //caculate how much should the tickets cost 
       void TicketClerk::setAmount(int sum) {}
       //get the amount of money
       double TicketClerk::getAmount() {}
       //set the total amount of money for the tickets
       void TicketClerk::setTicketSum(int sum) {}
       //get the total amount of money for the tickets
       int TicketClerk::getTicketSum() {}
       //set the amount of payment
       void TicketClerk::setPayment(double p) {}
       //for ticket clerk tp sell tickets
       void TicketClerk::sellTickets() {}
       
       -in consessionclerk.cc
       //create a conssion clerk       
       ConcessionClerk::ConcessionClerk(int ccId) : Employee(ccId, "ConcessionClerk") {}
       //calculate the mount of money the customer should pay
       void ConcessionClerk::calAmount() {}
       //get the amount of money the customer should pay
       double ConcessionClerk::getAmount() {}
       //set the amount of money the customer should pay
       void ConcessionClerk::setAmount(double a) {}
       //set payment
       void ConcessionClerk::setPayment(double p) {}
       //get payment
       double ConcessionClerk::getPayment() {}
       //set the food that have been bought   
       void ConcessionClerk::setFood(int pos, int sum) {
       //get the food that have been bought
       int ConcessionClerk::getFood(int pos){}
       //see if the manager signals to go on break
       // if have customer, then set busy and signal the customer, else set free
       // tell customers food price and ask to pay
       // customer leave, get next customer
       void ConcessionClerk::sellFood() {}
       //Print the number of waiting customer in each clerk's line
       void ConcessionClerk::printStatus(){}

       -in manager.cc
       //order ticket taker to take tickets
       //order movie technicion to play the movie
       //collects money after all the customer leaves 
       void Manager::work() {}
       //manager collects the money from the ticketclerk and caculates its total
       void Manager::collectMoney() {}      
       // ask the movie technician to start a Movie
       void Manager::startMovie() {}
       // ask ticketTaker and customer to start
       void Manager::startTicketTaken() {}
       // rand ask an employee to break and sigal the waiting customer to change line
       // if no clerk work and customers come, have to ask one to off break
       void Manager::randToBreak(Lock * lockWaiting, Employee ** clerk, int count, bool noClerk, Condition *cNoClerk, Semaphore * sNoClerk) {}

       -in movietechnician.cc       
       //create a movietechnician
       MovieTechnician::MovieTechnician(int id) : Employee(id, "MovieTechnician"){}
       //start a movie if the manager told so
       void MovieTechnician::WaitManager(){}
       //check if all the customers in the theater is seated 
       void MovieTechnician::checkSeated(){}
       //star playing a movie and ends it after a period of time 
       void MovieTechnician::playMovie(){}
       //Movietechnician broadcast all the customers in the theater to leave
       void MovieTechnician::infoCustomer(){}
       //acknoledge the manger that the movie is over
       void  MovieTechnician::infoManager(){}
       
       -in tickettaker.cc
       //create a ticket taker
       TicketTaker::TicketTaker(int ttId) : Employee(ttId, "TicketTaker")
       //ticket taker goes on break if the manager signals 
       //if not in a break, start taking tickets if there is a line
       //do not let anyone to go in when the theater is full       
       void TicketTaker::checkTickets() 
       //set the number of tickets taken
       void TicketTaker::setTicketSum(int sum) 
       //get the number of tickets taken
       int TicketTaker::getTicketSum() 
       
5. Testing: 
    -Part I
     The test cases are already provided, and it will run all together at once.

     How to run:
        To run test case 1, use "nachos -T" as the command.

     Test Output:
            Starting Test 1
            t1_t1: Acquired Lock t1_l1, waiting for t3
            t1_t2: trying to acquire lock t1_l1
            t1_t3: Trying to release Lock t1_l1
            You are not the owner. Only the lock owner can release it
            t1_t3: Trying to release Lock t1_l1
            You are not the owner. Only the lock owner can release it
            t1_t3: Trying to release Lock t1_l1
            You are not the owner. Only the lock owner can release it
            t1_t1: working in CS
            t1_t1: Releasing Lock t1_l1
            t1_t2: Acquired Lock t1_l1, working in CS
            t1_t2: Releasing Lock t1_l1
            Starting Test 2.  Note that it is an error if thread t2_t2
            completes
            t2_t1: Lock t2_l1 acquired, signalling t2_c1
            t2_t1: Releasing Lock t2_l1
            t2_t2: Lock t2_l1 acquired, waiting on t2_c1
            Starting Test 3
            t3_waiter0: Lock t3_l1 acquired, waiting on t3_c1
            t3_waiter1: Lock t3_l1 acquired, waiting on t3_c1
            t3_waiter2: Lock t3_l1 acquired, waiting on t3_c1
            t3_waiter3: Lock t3_l1 acquired, waiting on t3_c1
            t3_waiter4: Lock t3_l1 acquired, waiting on t3_c1
            t3_signaller: Lock t3_l1 acquired, signalling t3_c1
            t3_signaller: Releasing t3_l1
            t3_waiter0: freed from t3_c1
            Starting Test 4
            t4_waiter0: Lock t4_l1 acquired, waiting on t4_c1
            t4_waiter1: Lock t4_l1 acquired, waiting on t4_c1
            t4_waiter2: Lock t4_l1 acquired, waiting on t4_c1
            t4_waiter3: Lock t4_l1 acquired, waiting on t4_c1
            t4_waiter4: Lock t4_l1 acquired, waiting on t4_c1
            t4_signaller: Lock t4_l1 acquired, broadcasting t4_c1
            t4_signaller: Releasing t4_l1
            t4_waiter0: freed from t4_c1
            t4_waiter1: freed from t4_c1
            t4_waiter2: freed from t4_c1
            t4_waiter3: freed from t4_c1
            t4_waiter4: freed from t4_c1
            Starting Test 5.  Note that it is an error if thread t5_t1
            completes
            t5_t1: Lock t5_l1 acquired, waiting on t5_c1
            t5_t2: Lock t5_l2 acquired, signalling t5_c1
            t5_t2: Releasing Lock t5_l2
            t5_t2: Releasing Lock t5_l1



    - Part II
      
	##TEST CASE 1##
	
       How to run:
           
       Test result:
            Customer [0] in Group [0] is getting in TicketClerk line [0]
            Customer [3] in Group [1] is getting in TicketClerk line [1]
            Customer [8] in Group [2] is getting in TicketClerk line [2]
            Customer [11] in Group [3] is getting in TicketClerk line [3]
            Customer [13] in Group [4] is getting in TicketClerk line [4]
            Customer [15] in Group [5] is getting in TicketClerk line [0]
            Customer [17] in Group [6] is getting in TicketClerk line [1]
            Customer [24] in Group [8] is getting in TicketClerk line [2]
            Customer [22] in Group [7] is getting in TicketClerk line [3]
            Customer [29] in Group [9] is getting in TicketClerk line [4]
            Customer [31] in Group [11] is getting in TicketClerk line [0]
            Customer [35] in Group [12] is getting in TicketClerk line [1]
            Customer [37] in Group [13] is getting in TicketClerk line [2]
            Customer [39] in Group [14] is getting in TicketClerk line [3]
            Customer [30] in Group [10] is getting in TicketClerk line [4]
            Customer [40] in Group [15] is getting in TicketClerk line [0]

            
	##TEST CASE 2##
	
       How to run:
           
       Test result:
            
	##TEST CASE 3##
	
       How to run:
           
       Test result:
            a.
            Customer [0] in Group [0] is walking up to TicketClerk[0] to buy [1] tickets
            Customer [3] in Group [1] is walking up to TicketClerk[1] to buy [3] tickets
            Customer [8] in Group [2] is walking up to TicketClerk[2] to buy [5] tickets
            Customer [9] in Group [3] is walking up to TicketClerk[3] to buy [1] tickets
            Customer [11] in Group [4] is walking up to TicketClerk[4] to buy [2] tickets
            Customer [0] in Group [0] is leaving TicketClerk[0]
            Customer [3] in Group [1] is leaving TicketClerk[1]
            Customer [9] in Group [3] is leaving TicketClerk[3]
            Customer [13] in Group [5] is walking up to TicketClerk[0] to buy [2] tickets
            Customer [8] in Group [2] is leaving TicketClerk[2]
            Customer [11] in Group [4] is leaving TicketClerk[4]
            Customer [18] in Group [6] is walking up to TicketClerk[1] to buy [5] tickets
            Customer [18] in Group [6] is leaving TicketClerk[1]
            Customer [13] in Group [5] is leaving TicketClerk[0]

            b. 
            Customer [0] in Group [0] is walking up to ConcessionClerk[0] to buy [1] popcorn and [1] soda.
            Customer [9] in Group [3] is walking up to ConcessionClerk[1] to buy [0] popcorn and [1] soda.
            Customer [3] in Group [1] is walking up to ConcessionClerk[2] to buy [1] popcorn and [3] soda.
            Customer [11] in Group [4] is walking up to ConcessionClerk[3] to buy [2] popcorn and [1] soda.
            Customer [0] in Group [0] is leaving ConcessionClerk[0]
            Customer [9] in Group [3] is leaving ConcessionClerk[1]
            Customer [13] in Group [5] is walking up to ConcessionClerk[0] to buy [0] popcorn and [2] soda.
            Customer [3] in Group [1] is leaving ConcessionClerk[2]
            Customer [11] in Group [4] is leaving ConcessionClerk[3]
            Customer [8] in Group [2] is walking up to ConcessionClerk[1] to buy [5] popcorn and [3] soda.
            Customer [13] in Group [5] is leaving ConcessionClerk[0]
            Customer [18] in Group [6] is walking up to ConcessionClerk[0] to buy [3] popcorn and [3] soda.
            Customer [8] in Group [2] is leaving ConcessionClerk[1]
            Customer [18] in Group [6] is leaving ConcessionClerk[0]

            c. 
            Customer [0] in Group [0] is walking up to TicketTaker[0] to give [1] tickets.
            Customer [0] in Group [0] is leaving TicketTaker[0]
            Customer [9] in Group [3] is walking up to TicketTaker[1] to give [1] tickets.
            Customer [11] in Group [4] is walking up to TicketTaker[0] to give [2] tickets.
            Customer [9] in Group [3] is leaving TicketTaker[1]
            Customer [11] in Group [4] is leaving TicketTaker[0]
            Customer [3] in Group [1] is walking up to TicketTaker[2] to give [3] tickets.
            Customer [3] in Group [1] is leaving TicketTaker[2]
            Customer [13] in Group [5] is walking up to TicketTaker[0] to give [2] tickets.
            Customer [13] in Group [5] is leaving TicketTaker[0]
            Customer [8] in Group [2] is walking up to TicketTaker[1] to give [5] tickets.
            Customer [8] in Group [2] is leaving TicketTaker[1]
            Customer [18] in Group [6] is walking up to TicketTaker[0] to give [5] tickets.
            Customer [18] in Group [6] is leaving TicketTaker[0]

	##TEST CASE 4##
	    Managers get Clerks off their break when lines get too long

       We init with 5 clerk but only 1 on work. So 
       How to run: nachos -rs 10 -TC4 | egrep "TicketClerk.*break|getting in TicketClerk"

       Test result:
            TicketClerk [1] is going on break.
            TicketClerk [2] is going on break.
            TicketClerk [4] is going on break.
            Customer [0] in Group [0] is getting in TicketClerk line [0]
            Customer [3] in Group [1] is getting in TicketClerk line [0]
            Customer [8] in Group [2] is getting in TicketClerk line [0]
            TicketClerk [3] is going on break.
            Customer [10] in Group [3] is getting in TicketClerk line [0]
            Customer [12] in Group [4] is getting in TicketClerk line [0]
            Customer [17] in Group [5] is getting in TicketClerk line [0]
            Customer [22] in Group [6] is getting in TicketClerk line [0]
            TicketClerk [1] is coming off break.
            Manager has told TicketClerk [1] to go on break.
            Manager has told TicketClerk [0] to go on break.


	##TEST CASE 5##
	    Total sales never suffers from a race condition

       How to run: nachos -rs 10 -TC5 | egrep "Number of Customer|Total tickets"

       Test result: 
            Number of Customers = [19]
            Total tickets sold by office = [19]
            Total tickets taken by office = [19]
            
	##TEST CASE 6##
	    Customer groups always move together through the theater. This requires explicit synchronization that you implement.

       How to run: nachos -rs 10 -TC6 | egrep "group \[1\]" | egrep "HeadCustomer"
                   nachos -rs 10 -TC6 | egrep "group \[2\]" | egrep "HeadCustomer"
       Test result:

            Customer [1] of group [1] is waiting for the HeadCustomer.
            Customer [2] of group [1] is waiting for the HeadCustomer.
            HeadCustomer [3] of group [1] has told the group to proceed.
            Customer [1] of group [1] has been told by the HeadCustomer to proceed.
            Customer [1] of group [1] is waiting for the HeadCustomer.
            Customer [2] of group [1] has been told by the HeadCustomer to proceed.
            Customer [2] of group [1] is waiting for the HeadCustomer.
            HeadCustomer [3] of group [1] has told the group to proceed.
            Customer [1] of group [1] has been told by the HeadCustomer to proceed.
            Customer [1] of group [1] is waiting for the HeadCustomer.
            Customer [2] of group [1] has been told by the HeadCustomer to proceed.
            Customer [2] of group [1] is waiting for the HeadCustomer.
            HeadCustomer [3] of group [1] has told the group to proceed.
            Customer [1] of group [1] has been told by the HeadCustomer to proceed.
            Customer [2] of group [1] has been told by the HeadCustomer to proceed.
            HeadCustomer [3] of group [1] has told the group to proceed.
            HeadCustomer [3] of group [1] has told the group to proceed.

            Customer [5] of group [2] is waiting for the HeadCustomer.
            Customer [6] of group [2] is waiting for the HeadCustomer.
            Customer [7] of group [2] is waiting for the HeadCustomer.
            Customer [4] of group [2] is waiting for the HeadCustomer.
            HeadCustomer [8] of group [2] has told the group to proceed.
            Customer [5] of group [2] has been told by the HeadCustomer to proceed.
            Customer [6] of group [2] has been told by the HeadCustomer to proceed.
            Customer [7] of group [2] has been told by the HeadCustomer to proceed.
            Customer [4] of group [2] has been told by the HeadCustomer to proceed.
            Customer [5] of group [2] is waiting for the HeadCustomer.
            Customer [7] of group [2] is waiting for the HeadCustomer.
            Customer [6] of group [2] is waiting for the HeadCustomer.
            Customer [4] of group [2] is waiting for the HeadCustomer.
            HeadCustomer [8] of group [2] has told the group to proceed.
            Customer [5] of group [2] has been told by the HeadCustomer to proceed.
            Customer [5] of group [2] is waiting for the HeadCustomer.
            Customer [7] of group [2] has been told by the HeadCustomer to proceed.
            Customer [7] of group [2] is waiting for the HeadCustomer.
            Customer [6] of group [2] has been told by the HeadCustomer to proceed.
            Customer [4] of group [2] has been told by the HeadCustomer to proceed.
            Customer [6] of group [2] is waiting for the HeadCustomer.
            Customer [4] of group [2] is waiting for the HeadCustomer.
            HeadCustomer [8] of group [2] has told the group to proceed.
            Customer [5] of group [2] has been told by the HeadCustomer to proceed.
            Customer [7] of group [2] has been told by the HeadCustomer to proceed.
            Customer [6] of group [2] has been told by the HeadCustomer to proceed.
            Customer [4] of group [2] has been told by the HeadCustomer to proceed.
            HeadCustomer [8] of group [2] has told the group to proceed.
            HeadCustomer [8] of group [2] has told the group to proceed.

6. Discussions:
        
         
7. Miscellaneous: 
        
	-Programming
	
    -Compiling
    
   	-Testing & Debugging
